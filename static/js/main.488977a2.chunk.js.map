{"version":3,"sources":["assets/img/Profilowe_img_2.jpg","assets/img/react.png","assets/img/css_picture.png","assets/img/Html_picture.png","assets/img/js_logo.png","assets/img/bootstrap_logo.png","assets/img/sql_logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","style","marginRight","to","backgroundColor","width","position","bottom","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,2TCyE5BC,MAhEf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,YAChB,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,aAAaC,MAAO,CAAEC,YAAa,SAChD,yBAAKF,UAAU,iBAAf,eACc,6BADd,uBAIA,yBAAKA,UAAU,kBAAf,0BAGJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,oCACb,yBAAKA,UAAU,cACb,2BACE,kBAAC,IAAD,CAAMG,GAAG,MAAMH,UAAU,yBAAzB,aAMN,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,cACb,2BACE,kBAAC,IAAD,CAAMG,GAAG,SAASH,UAAU,yBAA5B,gBAOR,yBAAKA,UAAU,QACb,yBACEC,MAAO,CACLG,gBAAiB,UACjBC,MAAO,OACPC,SAAU,WACVC,OAAQ,KAEVP,UAAU,aAEV,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,YACb,0BAAMA,UAAU,YAAYC,MAAO,CAAEO,MAAO,UAA5C,kDC1CIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.488977a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profilowe_img_2.9bfc1ba5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/react.5e32f049.png\";","module.exports = __webpack_public_path__ + \"static/media/css_picture.50fcf8b2.png\";","module.exports = __webpack_public_path__ + \"static/media/Html_picture.2f809a20.png\";","module.exports = __webpack_public_path__ + \"static/media/js_logo.354f4449.png\";","module.exports = __webpack_public_path__ + \"static/media/bootstrap_logo.a4040113.png\";","module.exports = __webpack_public_path__ + \"static/media/sql_logo.bbf2b499.png\";","import React from \"react\";\nimport { Link, BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Portfolio from \"./components/Portfolio\";\nimport \"./App.css\";\nimport Navbar from \"./components/NavBar/Navbar\";\nimport Cv from \"./components/CV/Cv\";\nimport About from \"./components/About/About\";\nimport MainPage from \"./components/Main/MainPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"masthead\">\n        <div className=\"halfbackground\">\n          <div className=\"intro-text\" style={{ marginRight: \"14vw\" }}>\n            <div className=\"intro-lead-in\">\n              Hello, I'Am <br />\n              Wojciech Waleszczyk\n            </div>\n            <div className=\"intro-lead-inn\">Future Web developer</div>\n          </div>\n        </div>\n        <div className=\"schalfbackground\">\n          <div className=\"menuMain col-lg-12 first-content\">\n            <div className=\"intro-text\">\n              <p>\n                <Link to=\"/cv\" className=\"intro-lead-in-contain\">\n                  RESUME\n                </Link>\n              </p>\n            </div>\n          </div>\n          <div className=\"menuMain col-lg-12 second-content\">\n            <div className=\"intro-text\">\n              <p>\n                <Link to=\"/about\" className=\"intro-lead-in-contain\">\n                  ABOUT ME\n                </Link>\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"raw5\">\n          <div\n            style={{\n              backgroundColor: \"#343a40\",\n              width: \"100%\",\n              position: \"absolute\",\n              bottom: \"0\",\n            }}\n            className=\"col-lg-12\"\n          >\n            <div className=\"row align-items-center\">\n              <div className=\"col-md-4\">\n                <span className=\"copyright\" style={{ color: \"white\" }}>\n                  Copyright &copy; Wojciech Waleszczyk 2020\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n      {/* <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={MainPage} />\n          <Route path=\"/cv\" component={Cv} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </BrowserRouter> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/css/agency.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}